// <copyright file="Packet.cs" company="MUnique">
// Licensed under the MIT License. See LICENSE file in the project root for full license information.
// </copyright>

namespace MUnique.OpenMU.Network.Analyzer;

using System.ComponentModel;
using System.Runtime.CompilerServices;
using MUnique.OpenMU.Network.Packets;
using MUnique.OpenMU.Network.PlugIns;

/// <summary>
/// A captured data packet.
/// </summary>
public sealed class Packet : INotifyPropertyChanged
{
    private readonly byte[] _innerData;

    private string? _dataAsString;
    private ushort? _displayCode;
    private string? _message;
    private ClientVersion _analyzedByVersion;
    private PacketDefinition? _definition;

    /// <summary>
    /// Initializes a new instance of the <see cref="Packet" /> class.
    /// </summary>
    /// <param name="timestamp">The timestamp.</param>
    /// <param name="data">The data.</param>
    /// <param name="toServer">If set to <c>true</c>, the packet was sent to server; Otherwise it was sent to the client.</param>
    public Packet(TimeSpan timestamp, byte[] data, bool toServer)
    {
        this._innerData = data;
        this.Timestamp = timestamp;
        this.ToServer = toServer;
        this.Direction = this.ToServer ? "C->S" : "S->C";
    }

    /// <summary>
    /// Occurs when analyzing the packet requested, e.g. when the description is needed.
    /// </summary>
    public event EventHandler<AnalyzingRequestedEventArgs>? AnalyzingRequested;

    /// <inheritdoc />
    public event PropertyChangedEventHandler? PropertyChanged;

    /// <summary>
    /// Gets the timestamp.
    /// </summary>
    public TimeSpan Timestamp { get; }

    /// <summary>
    /// Gets the raw data of the packet.
    /// </summary>
    public byte[] Data => this._innerData;

    /// <summary>
    /// Gets the type of the packet, which is the first byte of the packet byte array.
    /// </summary>
    public byte Type => this._innerData[0];

    /// <summary>
    /// Gets the code of the packet, which specifies the kind of the message.
    /// </summary>
    public byte Code => this._innerData.AsSpan().GetPacketType();

    /// <summary>
    /// Gets the sub code of the packet, which further specifies the kind of the message, if specified.
    /// </summary>
    public byte? SubCode => this._innerData.AsSpan().GetPacketSubType();

    /// <summary>
    /// Gets the display code of the packet, which specifies the kind of the message.
    /// </summary>
    public ushort DisplayCode
    {
        get
        {
            if (this._displayCode is not null)
            {
                return this._displayCode.Value;
            }

            if (this._definition?.SubCodeSpecified is not true)
            {
                return this.Code;
            }

            ushort result = this.Code;
            if (this.SubCode is { } subCode)
            {
                result <<= 8;
                result |= subCode;
            }

            this._displayCode = result;
            return result;
        }
    }

    /// <summary>
    /// Gets the direction as string.
    /// </summary>
    public string Direction { get; }

    /// <summary>
    /// Gets the packet as text in a one-line string.
    /// </summary>
    public string Message
    {
        get
        {
            if (this._message is null && this.AnalyzingRequested is not null)
            {
                var request = new AnalyzingRequestedEventArgs(this);
                this.AnalyzingRequested?.Invoke(this, request);
                this._message = request.Message;
                this._analyzedByVersion = request.ClientVersion;
                this._definition = request.Definition;
                this.RaisePropertyChanged(nameof(DisplayCode));
            }

            return this._message ?? string.Empty;
        }
    }

    /// <summary>
    /// Gets a value indicating whether the packet was sent to the server; Otherwise it was sent to the client.
    /// </summary>
    public bool ToServer { get; }

    /// <summary>
    /// Gets the size of the packet byte array.
    /// </summary>
    public int Size => this._innerData.Length;

    /// <summary>
    /// Gets the packet data as binary string.
    /// </summary>
    public string PacketData => this._dataAsString ??= this._innerData.AsString();

    /// <summary>
    /// Gets the protocol version which was applied when analyzing.
    /// </summary>
    public ClientVersion AnalyzedByVersion => _analyzedByVersion;

    /// <inheritdoc />
    public override string ToString()
    {
        return $"{this.Direction}: {this.PacketData}";
    }

    /// <summary>
    /// Clears the message which was generated by the packet analyzer based on a selected version.
    /// </summary>
    public void ClearMessage()
    {
        this._analyzedByVersion = default;
        this._definition = null;
        this._displayCode = null;
        this._message = null;
        this.RaisePropertyChanged(nameof(Message));
    }

    private void RaisePropertyChanged([CallerMemberName] string? propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    /// <summary>
    /// Event args for <see cref="Packet.AnalyzingRequested"/>.
    /// </summary>
    public class AnalyzingRequestedEventArgs : EventArgs
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyzingRequestedEventArgs"/> class.
        /// </summary>
        /// <param name="data">The data.</param>
        public AnalyzingRequestedEventArgs(Packet data)
        {
            Packet = data;
        }

        /// <summary>
        /// Gets the packet which should be analyzed.
        /// </summary>
        public Packet Packet { get; }

        /// <summary>
        /// Gets or sets the definition which was found during the analyzing.
        /// </summary>
        public PacketDefinition? Definition { get; set; }

        /// <summary>
        /// Gets or sets the client version which was set during analyzing.
        /// </summary>
        public ClientVersion ClientVersion { get; set; }

        /// <summary>
        /// Gets or sets the message which describes the packet in a one-line string.
        /// </summary>
        public string Message { get; set; } = string.Empty;
    }
}